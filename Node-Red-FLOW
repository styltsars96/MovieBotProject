[{"id":"6cb5141a.7a22ac","type":"function","z":"d916f26a.15e4","name":"Prepare API Request","func":"//Static\nconst movie_genres =   { \"action\":28,\"adventure\":12,\"animation\":16,\"comedy\": 35,\"crime\": 80, \"documentary\":99, \"drama\": 18,\n    \"family\" : 10751, \"fantasy\" : 14, \"history\" : 36, \"horror\" : 27, \"music\": 10402, \"mystery\": 9648, \"romance\": 10749,  \"science fiction\": 878,\n     \"thriller\": 53, \"war\": 10752, \"western\": 37\n};\n\nconst movie_filters = [\"popular\",\"top_rated\",\"now_playing\",\"upcoming\",\"latest\"];\n\n//Utility: check if a parameter is well defined.\nisDefined = function(variable){\n    if (typeof variable === 'undefined' || variable === null || variable === \"\") {\n        return false;\n    } else return true;\n};\n\n//Utility: select random\ngetRandomSelection = function(arr){\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n\n//Operation on DF response...\nvar params = msg.AIresponse.result.parameters;//Get perameters for searches.\nvar requestArray = [];//Array of requests.\n\n\n//DEFINITIONS BASED ON PARAMETERS, allocation if they are well defined.\n//EXAMPLE: {path:\"search/movie\", parameters:\"&query=\"+params.movieTitle+\"&page=1\", AIentity:\"movieTitle\"};\nif(isDefined(params.movieTitle)){ //Get Overview of the requested movie.\n    console.log(\"movieTitle\");\n    requestArray.push({path:\"search/movie\", parameters:\"&query=\"+params.movieTitle+\"&page=1\", AIentity:\"movieTitle\"});\n}\nif(isDefined(params.movieActors)){ //Get the stars of the requested movie.\n    console.log(\"movieActors\");\n    requestArray.push({path:\"search/movie\", parameters:\"&query=\"+params.movieActors+\"&page=1\", AIentity:\"movieActors\"});\n    requestArray.push({path:\"movie/{movie_id}/credits\", parameters:\"\", AIentity:\"movieActors\"});\n}\nif(isDefined(params.movieInfo)){ //Get the cast and description of the movie.\n    console.log(\"movieInfo\");\n    extra = \"\";\n    if(isDefined(params.movieYear)) extra = \"&primary_release_year=\"+params.movieYear;\n    requestArray.push({path:\"search/movie\", parameters:\"&query=\"+params.movieInfo+extra+\"&page=1\", AIentity:\"movieInfo\"});\n    requestArray.push({path:\"movie/{movie_id}/credits\", parameters:\"\", AIentity:\"movieInfo\"});\n}\nif(isDefined(params.movieCategory)){ //Get a few good suggestions for the movie genre \n    console.log(\"movieCategory\");\n    genre_id = movie_genres[params.movieCategory];\n    requestArray.push({path:\"genre/\"+genre_id+\"/movies\", parameters:\"&sort_by=created_at.asc\", AIentity:\"movieCategory\"});\n}\nif(isDefined(params.movieYear)){ //Cannot be implemented yet...\n    console.log(\"movieYear\");\n    \n}\nif(isDefined(params.movieFilter)){ //Get top_rated,upcoming,popular,now_playing,latest,etc.\n    console.log(\"movieFilter\");\n    if (movie_filters.includes(params.movieFilter)){\n        requestArray.push({path:\"movie/\"+params.movieFilter, parameters:\"\", AIentity:\"movieFilter\"});\n        msg.movieFilter = params.movieFilter;\n    } \n}\n//END DEFINITIONS\n\n//FALLBACK SPEECH (if search fails, or something goes wrong)\nmsg.speechFallback = getRandomSelection([\n    \"I couldn't find what you asked for. Please try again!\",\n    \"Sorry, I didn't find anything related to that!\",\n    \"Seems like I couldn't find anything.\",\n    \"Couldn't find what you asked for.\"\n]);\n\n//Creating requests...\nlen = requestArray.length;\nif( len < 1 ) return msg; //If no requests are formulated do nothing.\n//ONLY WHEN THERE HAVE TO BE REQUESTS...\nmsg.moreAPI = true;//mode: send api request, not last.\nmsg.requestQueue = [];//Queue of requests to API.\nmsg.path = requestArray[0].path;\nmsg.parameters = requestArray[0].parameters;\nmsg.AIentity = requestArray[0].AIentity;\nif(len ==1){//there is only one request.\n    msg.moreAPI = false;//last request\n    return msg;\n}\n//If more than one requests are required...\nfor(var i=1; i<len; i++){\n    if(isDefined(requestArray[i].path) && isDefined(requestArray[i].AIentity)){\n        msg.requestQueue.push({\n            path : requestArray[i].path,\n            parameters : requestArray[i].parameters,\n            AIentity : requestArray[i].AIentity\n        });\n    } else continue;\n}\nreturn msg; \n","outputs":1,"noerr":0,"x":180,"y":1220,"wires":[["5ed3ca29.5ae034"]]},{"id":"296250f7.75b9d","type":"debug","z":"d916f26a.15e4","name":"Test API Start","active":true,"console":"false","complete":"true","x":980,"y":1560,"wires":[]},{"id":"d5ba1c30.04705","type":"json","z":"d916f26a.15e4","name":"","pretty":false,"x":750,"y":1160,"wires":[["3d20ab1c.908884","af4798bd.7587a8"]]},{"id":"3d20ab1c.908884","type":"function","z":"d916f26a.15e4","name":"Process Results & Formulate New Speech","func":"//Utility: Replace missing String  and replace\n//using a 'replacement marker' substring.\nreplaceToken = function(str,arr,rep,space=true){\n    fixer = space ? \" \"+rep : rep;\n    ret = \"\";\n    pieces = str.split(rep);\n    for (i =0; i<pieces.length || i<arr.length  ; i++){\n        if(i >= pieces.length){\n            ret = ret + arr[i];\n        }else if(i >= arr.length){\n            ret = ret + pieces[i];\n        }else{\n            pieces[i] = pieces[i]+fixer;\n            pieces[i] = pieces[i].replace(rep,arr[i]);\n            ret = ret + pieces[i];\n        }\n    }\n    return ret;\n};\n\n\n//FUNCTIONS: Process the responses based on the type of request.\n//APIcomplete is true when API operation is completed. 'undefined' if not.\nmovieTitle = function(){\n    try{\n        msg.payload = \"The description for the movie \"+\n        msg.payload.results[0].title+\" is:\\n\"+\n        msg.payload.results[0].overview+\"\\nThe movie's release date is: \"+ msg.payload.results[0].release_date+\n        \"\\nIt's rated \"+ msg.payload.results[0].vote_average+ \"/10\";\n    msg.APIcomplete = true;\n    }catch(e){\n        console.log(e);\n    }\n    \n};\nmovieActors = function(){\n    q = msg.requestQueue.length;\n    if (q == 1){\n        try{\n            //keep results of the phase\n            movie_id = msg.payload.results[0].id;\n            //request queue operation\n            req = msg.requestQueue[0];\n            msg.requestQueue = msg.requestQueue.slice(1,q);\n            //prepare next request.\n            msg.path = replaceToken(req.path,[movie_id],\"{movie_id}\",false);\n            msg.parameters = req.parameters;\n        }catch(e){\n            console.log(e);\n            msg.moreAPI = false;\n        }\n    }else if(q == 0){\n        try{\n            //route to response\n            msg.moreAPI = false;\n            //keep result.\n            castArray = msg.payload.cast;\n            //Formulate speech.\n            replacement = \"\";\n            len = castArray.length < 10 ? castArray.length : 10 ;\n            for(i=0;i< len - 1;i++){\n                replacement = replacement+castArray[i].name+\", \";\n            }\n            replacement = replacement+castArray[len- 1].name;\n            msg.payload =  replaceToken(msg.speech,[replacement],\"^\",false);\n            msg.APIcomplete = true;\n        }catch(e){\n            console.log(e);\n            msg.moreAPI = false;\n        }\n    }\n};\nmovieInfo = function(){\n    q = msg.requestQueue.length;\n    if (q == 1){\n        try{\n           //keep results of the phase\n            msg.movie_title = msg.payload.results[0].title;\n            movie_id = msg.payload.results[0].id;\n            msg.movie_description = msg.payload.results[0].overview;\n            //request queue operation\n            req = msg.requestQueue[0];\n            msg.requestQueue = msg.requestQueue.slice(1,q);\n            //prepare next request.\n            msg.path = replaceToken(req.path,[movie_id],\"{movie_id}\",false);\n            msg.parameters = req.parameters; \n        }catch(e){\n            console.log(e);\n            msg.moreAPI = false;\n        }\n        \n    }else if(q == 0){\n        try{\n            //route to response\n            msg.moreAPI = false;\n            //keep result.\n            castArray = msg.payload.cast;\n            //Formulate speech.\n            castString = \"\";\n            len = castArray.length < 10 ? castArray.length : 10 ;\n            for(i=0;i< len - 1;i++){\n                castString = castString+castArray[i].name+\", \";\n            }\n            castString = castString+castArray[len- 1].name;\n            msg.payload =  \"In the movie titled '\"+msg.movie_title+\"' the main cast is \"+castString+\n                \"\\nDescription:\\n\"+msg.movie_description ;\n            msg.APIcomplete = true;\n        }catch(e){\n            console.log(e);\n            msg.moreAPI = false;\n        }\n        \n    }\n};\n\nmovieCategory = function(){\n    try{\n        movieString = \"\";\n        res = msg.payload.results;\n        for(i=0;i<res.length;i++){\n            if(res[i].vote_average>=7.0){\n                movieString=movieString+res[i].title+\", \";\n            }\n        }\n        movieString = movieString.slice(0, -2);\n        msg.payload = \"Here are a few suggestions:\\n\"+ movieString;\n        msg.APIcomplete = true;\n    }catch(e){\n        console.log(e);\n        msg.moreAPI = false;\n    }\n};\n\nmovieFilter = function(){\n    try{\n        movieString = \"\";\n        if (msg.movieFilter == \"latest\"){\n            msg.payload = \"Well, here is THE latest movie there is: \"+msg.payload.title;\n            msg.APIcomplete = true;\n            return;\n        }\n        filter = msg.movieFilter.replace(\"_\",\" \");\n        res = msg.payload.results;\n        for(i=0;i<res.length;i++){\n            movieString=movieString+res[i].title+\", \";\n        }\n        movieString = movieString.slice(0, -2);\n        msg.payload = \"I do know the \"+filter+\" movies. Here they are:\\n\"+movieString;\n        msg.APIcomplete = true; \n    }catch(e){\n        console.log(e);\n        msg.moreAPI = false;\n    }\n    \n};\n\n\n//Select processing type.\nswitch(msg.AIentity){\n    case \"movieTitle\":\n        movieTitle();\n        break;\n    case \"movieActors\":\n        movieActors();\n        break;\n    case \"movieInfo\":\n        movieInfo();\n        break;\n    case \"movieCategory\":\n        movieCategory();\n        break;\n    case \"movieFilter\":\n        movieFilter();\n        break;\n}\nreturn msg;","outputs":1,"noerr":0,"x":1010,"y":1160,"wires":[["3502e4ab.160a3c","b7b1faf4.b5f908"]]},{"id":"b8beb4a4.b87188","type":"comment","z":"d916f26a.15e4","name":"The MOVIE DB API","info":"","x":310,"y":1140,"wires":[]},{"id":"13cb1538.28f61b","type":"debug","z":"d916f26a.15e4","name":"verif out","active":true,"console":"false","complete":"true","x":640,"y":1620,"wires":[]},{"id":"edcb372a.add1c8","type":"http in","z":"d916f26a.15e4","name":"GET /huabot","url":"/huabot","method":"get","upload":false,"swaggerDoc":"","x":170,"y":1620,"wires":[["13c6410f.1c011f"]]},{"id":"84b3261.7ca5ad8","type":"function","z":"d916f26a.15e4","name":"messageWebhookController","func":"//TOKENS\nconst API_AI_TOKEN = ''; //YOUR DIALOGFLOW ACCESS TOKEN\nconst FACEBOOK_ACCESS_TOKEN = '';//YOUR FB PAGE ACCESS TOKEN\n\n//Dependencies\nconst apiAiClient = context.global.apiai(API_AI_TOKEN);\nconst request = context.global.request;\n\n//Empty checker...\nfunction isEmpty(obj) {\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n//Send Messenger Message\nconst sendTextMessage = (senderId, text) => {\n    request({\n    url: 'https://graph.facebook.com/v2.6/me/messages',\n    qs: { access_token: FACEBOOK_ACCESS_TOKEN },\n    method: 'POST',\n    json: {\n        recipient: { id: senderId },\n        message: { text },\n        }\n    });\n};\n\n//Process Message using API AI (DialogFlow)\nconst processMessage = (event) => {\n    const senderId = event.sender.id;\n    const message = event.message.text;\n    const apiaiSession = apiAiClient.textRequest(message, {sessionId: 'crowdbotics_bot'});\n    //WHEN response is received...\n    apiaiSession.on('response', (response) => {\n    //get the response, check if the response needs api\n        //If response has parameters to search\n        if(! isEmpty(response.result.parameters )){\n            //API is needed...\n            msg.apiMode = true;\n            msg.AIresponse = response;\n            msg.MessengerId = senderId;\n            //default speech (fallback in api mode, changes in api flow)\n            msg.speech = response.result.fulfillment.messages[0].speech;\n            node.send(msg);\n        }else{//if speech \n            //DEFAULT (NO API INVOKED)\n            const speech = response.result.fulfillment.messages[0].speech;\n            sendTextMessage(senderId, speech);\n        }\n    });\n \n    apiaiSession.on('error', error => console.log(error));\n    apiaiSession.end();\n};\n\n//What happens when message is sent.\nconst messageWebhookController = (req) => {\n    if (req.body.object === 'page') {\n        req.body.entry.forEach(entry => {\n            entry.messaging.forEach(event => {\n                if (event.message && event.message.text) {\n                    processMessage(event);\n                }\n            });\n        });\n        //res.status(200).end();\n    return {statusCode:200};\n    }\n};\n\n\nif(msg.apiMode){//On API RESPONSE\n    sendTextMessage(msg.MessengerId, msg.speech);\n    console.log(\"API\");\n    \n}else{//On MESSENGER MESSAGE ...\n    res = msg.res;\n    msg = messageWebhookController(msg.req);\n    msg.res = res;\n    return msg;\n}\n\n","outputs":1,"noerr":0,"x":440,"y":1520,"wires":[["3fd12340.802e3c","5f0acd35.286974"]]},{"id":"360d73c0.aeae9c","type":"http in","z":"d916f26a.15e4","name":"POST /huabot","url":"/huabot","method":"post","upload":false,"swaggerDoc":"","x":170,"y":1520,"wires":[["84b3261.7ca5ad8"]]},{"id":"13c6410f.1c011f","type":"function","z":"d916f26a.15e4","name":"verificationController","func":"const verificationController = (req) => {\n var hubChallenge = req.query['hub.challenge'];\n var hubMode = req.query['hub.mode'];\n const verifyTokenMatches = (req.query['hub.verify_token'] === 'project');\nif (hubMode && verifyTokenMatches) {\n //res.status(200).send(hubChallenge);\n return {payload:hubChallenge,statusCode:200};\n } else {\n //res.status(403).end();\n return {statusCode : 403};\n }\n};\nconsole.log(\"Attempting verification\");\nres = msg.res;\nmsg = verificationController(msg.req);\nmsg.res = res;\nconsole.log(\"Sending Response\");\nreturn msg;","outputs":1,"noerr":0,"x":420,"y":1660,"wires":[["13cb1538.28f61b","f8042f28.64ee4"]]},{"id":"f8042f28.64ee4","type":"http response","z":"d916f26a.15e4","name":"Response","statusCode":"","headers":{},"x":960,"y":1640,"wires":[]},{"id":"3fd12340.802e3c","type":"debug","z":"d916f26a.15e4","name":"ctrl out","active":true,"console":"false","complete":"true","x":650,"y":1500,"wires":[]},{"id":"a1ec363a.5e8ae8","type":"comment","z":"d916f26a.15e4","name":"FB Verification","info":"","x":170,"y":1580,"wires":[]},{"id":"5b40b1ef.423ad","type":"comment","z":"d916f26a.15e4","name":"FB Message","info":"","x":170,"y":1480,"wires":[]},{"id":"5f0acd35.286974","type":"switch","z":"d916f26a.15e4","name":"API MODE?","property":"apiMode","propertyType":"msg","rules":[{"t":"true"},{"t":"else"}],"checkall":"true","outputs":2,"x":770,"y":1560,"wires":[["6cb5141a.7a22ac","296250f7.75b9d"],["f8042f28.64ee4"]]},{"id":"5c69d86b.482448","type":"comment","z":"d916f26a.15e4","name":"MAIN CONTROLLER","info":"","x":440,"y":1560,"wires":[]},{"id":"e7b7f31e.60e91","type":"http request","z":"d916f26a.15e4","name":"GET MOVIE DB API","method":"GET","ret":"txt","url":"https://api.themoviedb.org/3/{{{path}}}?api_key=YOUR_API_KEY&language=en-US{{{parameters}}}","tls":"","x":580,"y":1160,"wires":[["d5ba1c30.04705"]]},{"id":"3502e4ab.160a3c","type":"debug","z":"d916f26a.15e4","name":"","active":true,"console":"false","complete":"true","x":1250,"y":1140,"wires":[]},{"id":"5ed3ca29.5ae034","type":"switch","z":"d916f26a.15e4","name":"request?","property":"moreAPI","propertyType":"msg","rules":[{"t":"true"},{"t":"false"},{"t":"else"}],"checkall":"true","outputs":3,"x":360,"y":1220,"wires":[["e7b7f31e.60e91","702c8eb1.d89e5"],["e7b7f31e.60e91","702c8eb1.d89e5"],["1db7ec26.6b6224"]]},{"id":"1db7ec26.6b6224","type":"function","z":"d916f26a.15e4","name":"Complete Speech Formulation","func":"//Utility: check if a parameter is well defined.\nisDefined = function(variable){\n    if (typeof variable === 'undefined' || variable === null || variable === \"\") {\n        return false;\n    } else return true;\n};\n\n//Operation\nif(isDefined(msg.moreAPI)){\n    if(isDefined(msg.APIcomplete)){//IF ALL WENT WELL\n        msg.speech = msg.payload;\n        return msg;\n    }//else...\n    console.log(\"Incomplete API operation\");\n}\n//If there was a problem.\nmsg.speech = msg.speechFallback;//Return fallback speech!\nreturn msg;","outputs":1,"noerr":0,"x":910,"y":1340,"wires":[["84b3261.7ca5ad8","7f6a69f0.d5d058"]]},{"id":"702c8eb1.d89e5","type":"debug","z":"d916f26a.15e4","name":"","active":true,"console":"false","complete":"true","x":550,"y":1220,"wires":[]},{"id":"7f6a69f0.d5d058","type":"debug","z":"d916f26a.15e4","name":"","active":false,"console":"false","complete":"true","x":1130,"y":1320,"wires":[]},{"id":"af4798bd.7587a8","type":"debug","z":"d916f26a.15e4","name":"","active":true,"console":"false","complete":"true","x":830,"y":1200,"wires":[]},{"id":"b7b1faf4.b5f908","type":"switch","z":"d916f26a.15e4","name":"more request","property":"moreAPI","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","outputs":2,"x":850,"y":1280,"wires":[["e7b7f31e.60e91"],["1db7ec26.6b6224"]]},{"id":"7fabb8ff.0b9188","type":"comment","z":"d916f26a.15e4","name":"FB & DialogFlow","info":"","x":380,"y":1440,"wires":[]}]
